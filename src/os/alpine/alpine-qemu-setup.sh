#!/bin/bash
set -e

# Helper function for secure downloading with corporate certificate fallback
secure_download() {
    local url="$1"
    local output="$2"
    local success=false
    
    if command -v curl >/dev/null 2>&1; then
        # Try curl with standard SSL verification first
        echo "Attempting secure download with curl..."
        if curl -fsSL "$url" --output "$output" 2>/dev/null; then
            success=true
        else
            echo "Standard SSL verification failed, trying with --ssl-no-revoke for corporate networks..."
            if curl -fsSL --ssl-no-revoke "$url" --output "$output" 2>/dev/null; then
                success=true
                echo "Downloaded successfully with --ssl-no-revoke (corporate network detected)"
            fi
        fi
    elif command -v wget >/dev/null 2>&1; then
        # Try wget with standard SSL verification first
        echo "Attempting secure download with wget..."
        if wget --quiet "$url" -O "$output" 2>/dev/null; then
            success=true
        else
            echo "Standard SSL verification failed, trying with --no-check-certificate for corporate networks..."
            if wget --quiet --no-check-certificate "$url" -O "$output" 2>/dev/null; then
                success=true
                echo "Downloaded successfully with --no-check-certificate (corporate network detected)"
            fi
        fi
    else
        echo "Error: curl or wget is required but not installed."
        exit 1
    fi
    
    if [ "$success" = false ]; then
        echo "Error: Failed to download $url"
        echo "This may be due to:"
        echo "  - Network connectivity issues"
        echo "  - SSL certificate problems"
        echo "  - Corporate firewall restrictions"
        echo ""
        echo "Try manually downloading the file or contact your IT administrator."
        exit 1
    fi
}

# Variables
ALPINE_VERSION="${ALPINE_VERSION:-3.21}"
ALPINE_VERSION_LONG="${ALPINE_VERSION_LONG:-${ALPINE_VERSION}.4}"
RELEASE="${RELEASE:-r0}"
SEED_FILE_NAME="${SEED_FILE_NAME:-alpine-seed.img}"
QEMU_EFI_FILE_NAME="${QEMU_EFI_FILE_NAME:-QEMU_EFI.fd}"
VM_NAME="${VM_NAME:-alpine-vm}"
DISK_SIZE="${DISK_SIZE:-20G}"
MEMORY="${MEMORY:-2048}"
CPUS="${CPUS:-2}"
SYSTEM_ARCH=$(uname -m)
ARCH="${ARCH:-$SYSTEM_ARCH}"

if [ ! -f "${VM_NAME}.qcow2" ]; then
  # Download Alpine cloud image (UEFI variant for all architectures)
  ALPINE_IMAGE_URL="https://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/releases/cloud/generic_alpine-${ALPINE_VERSION_LONG}-${ARCH}-uefi-cloudinit-${RELEASE}.qcow2"
  echo "Downloading Alpine cloud image ${ALPINE_IMAGE_URL}..."
  secure_download "${ALPINE_IMAGE_URL}" "${VM_NAME}.qcow2"
  
  # Resize the disk image
  if command -v qemu-img >/dev/null 2>&1; then
    qemu-img resize "${VM_NAME}.qcow2" ${DISK_SIZE}
    echo "VM disk resized to ${DISK_SIZE}"
  else
    echo "Warning: qemu-img not found. Disk not resized."
  fi
else
  echo "VM image '${VM_NAME}.qcow2' already exists. Skipping download."
fi

# Download pre-built seed image from GitHub releases
if [ ! -f "$SEED_FILE_NAME" ]; then
  echo "Downloading pre-built seed image from GitHub releases..."
  SEED_IMAGE_URL="https://github.com/rrmistry/alpine-qemu/releases/latest/download/${SEED_FILE_NAME}"
  secure_download "${SEED_IMAGE_URL}" "${SEED_FILE_NAME}"
else
  echo "${SEED_FILE_NAME} already exists. Skipping download."
fi

# Download UEFI firmware for all architectures
if [ ! -f "$QEMU_EFI_FILE_NAME" ]; then
  echo "Downloading UEFI firmware for ${ARCH}..."
  case "$ARCH" in
    x86_64)
      UEFI_URL="https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd"
      ;;
    aarch64)
      UEFI_URL="https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd"
      ;;
    *)
      echo "Warning: No UEFI firmware URL defined for ${ARCH}, continuing without firmware"
      UEFI_URL=""
      ;;
  esac
  
  if [ -n "$UEFI_URL" ]; then
    secure_download "$UEFI_URL" "$QEMU_EFI_FILE_NAME"
  fi
else
  echo "${QEMU_EFI_FILE_NAME} already exists. Skipping download."
fi

# Determine the host CPU architecture and select the appropriate QEMU binary.
case "$ARCH" in
  x86_64)
    QEMU_BIN="qemu-system-x86_64"
    ;;
  i686)
    QEMU_BIN="qemu-system-i386"
    ;;
  aarch64)
    QEMU_BIN="qemu-system-aarch64"
    ;;
  armv7l)
    QEMU_BIN="qemu-system-arm"
    ;;
  *)
    echo "Unsupported architecture: $ARCH" >&2
    exit 1
    ;;
esac

# Create runtime script for subsequent runs (without cloud-init)
ALPINE_QEMU_RUNTIME_SCRIPT="${VM_NAME}.sh"
echo "Creating runtime script ${ALPINE_QEMU_RUNTIME_SCRIPT}"

# Build UEFI-compatible QEMU command
cat > ${ALPINE_QEMU_RUNTIME_SCRIPT} << EOF
#!/bin/bash
set -e

# Runtime script for Alpine Linux VM (UEFI)
# Generated by alpine-qemu-setup.sh

VM_NAME="${VM_NAME}"
ARCH="${ARCH}"
QEMU_BIN="${QEMU_BIN}"
QEMU_EFI_FILE_NAME="${QEMU_EFI_FILE_NAME}"

CPUS=\${CPUS:-${CPUS}}
MEMORY=\${MEMORY:-${MEMORY}}

echo "🚀 Starting Alpine Linux VM (\${ARCH}, UEFI)"
echo "   Memory: \${MEMORY}MB, CPUs: \${CPUS}"
echo "   SSH: ssh -p 8022 alpine@localhost (password: alpine)"
echo "   Stop: Ctrl+A, X or 'sudo poweroff' inside VM"
echo ""

# Build QEMU command with UEFI support
QEMU_CMD="\${QEMU_BIN}"
QEMU_CMD="\${QEMU_CMD} -machine type=virt"

# Architecture-specific CPU settings
case "\${ARCH}" in
  aarch64)
    QEMU_CMD="\${QEMU_CMD} -cpu cortex-a57"
    ;;
  x86_64)
    QEMU_CMD="\${QEMU_CMD} -cpu qemu64"
    ;;
esac

# Common VM settings
QEMU_CMD="\${QEMU_CMD} -smp \${CPUS}"
QEMU_CMD="\${QEMU_CMD} -m \${MEMORY}"
QEMU_CMD="\${QEMU_CMD} -drive file=\${VM_NAME}.qcow2,format=qcow2,if=virtio"
QEMU_CMD="\${QEMU_CMD} -netdev user,id=net0,hostfwd=tcp::8022-:22"
QEMU_CMD="\${QEMU_CMD} -device virtio-net-pci,netdev=net0"

# UEFI firmware and console
if [ -f "\${QEMU_EFI_FILE_NAME}" ]; then
  QEMU_CMD="\${QEMU_CMD} -bios \${QEMU_EFI_FILE_NAME}"
fi
QEMU_CMD="\${QEMU_CMD} -nographic"
QEMU_CMD="\${QEMU_CMD} -serial mon:stdio"

# Add any additional arguments
QEMU_CMD="\${QEMU_CMD} \$@"

echo "Executing: \${QEMU_CMD}"
echo ""

# Execute the command
exec \${QEMU_CMD}
EOF

chmod +x ${ALPINE_QEMU_RUNTIME_SCRIPT}

# Run the VM with cloud-init configuration for first time setup
echo ""
echo "🎉 Alpine Linux VM setup complete!"
echo ""
echo "📋 Next steps:"
echo "   1. Start VM: ./${ALPINE_QEMU_RUNTIME_SCRIPT}"
echo "   2. SSH access: ssh -p 8022 alpine@localhost (password: alpine)"
echo "   3. Stop VM: Ctrl+A, X or 'sudo poweroff' inside VM"
echo ""
echo "🔧 Configuration:"
echo "   - Architecture: ${ARCH}"
echo "   - Firmware: UEFI"
echo "   - Memory: ${MEMORY}MB"
echo "   - CPUs: ${CPUS}"
echo "   - Disk: ${DISK_SIZE}"
echo ""
echo "📁 Files created:"
echo "   - ${VM_NAME}.qcow2 (VM disk image)"
echo "   - ${SEED_FILE_NAME} (cloud-init seed)"
if [ -f "${QEMU_EFI_FILE_NAME}" ]; then
echo "   - ${QEMU_EFI_FILE_NAME} (UEFI firmware)"
fi
echo "   - ${ALPINE_QEMU_RUNTIME_SCRIPT} (runtime script)"
echo ""
echo "💡 To start with cloud-init (first boot only):"

# Build and execute UEFI-compatible QEMU command for initial setup
QEMU_CMD="${QEMU_BIN}"
QEMU_CMD="${QEMU_CMD} -machine type=virt"

# Architecture-specific CPU settings
case "${ARCH}" in
  aarch64)
    QEMU_CMD="${QEMU_CMD} -cpu cortex-a57"
    ;;
  x86_64)
    QEMU_CMD="${QEMU_CMD} -cpu qemu64"
    ;;
esac

# Common VM settings
QEMU_CMD="${QEMU_CMD} -smp ${CPUS}"
QEMU_CMD="${QEMU_CMD} -m ${MEMORY}"
QEMU_CMD="${QEMU_CMD} -drive file=${VM_NAME}.qcow2,format=qcow2,if=virtio"
QEMU_CMD="${QEMU_CMD} -drive file=${SEED_FILE_NAME},format=raw,if=virtio,readonly=on"
QEMU_CMD="${QEMU_CMD} -netdev user,id=net0,hostfwd=tcp::8022-:22"
QEMU_CMD="${QEMU_CMD} -device virtio-net-pci,netdev=net0"

# UEFI firmware and console
if [ -f "${QEMU_EFI_FILE_NAME}" ]; then
  QEMU_CMD="${QEMU_CMD} -bios ${QEMU_EFI_FILE_NAME}"
fi
QEMU_CMD="${QEMU_CMD} -nographic"
QEMU_CMD="${QEMU_CMD} -serial mon:stdio"

# Add any additional arguments
QEMU_CMD="${QEMU_CMD} $@"

echo "${QEMU_CMD}"
echo ""
echo "🚀 Starting VM with cloud-init for initial setup..."

exec ${QEMU_CMD}
